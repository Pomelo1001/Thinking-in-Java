package com.example.demo.algorithm;

/**
 * @author：cp
 * @time：2021-3-10
 * @Description: todo
 */
public class Solution1 {

    public Solution1() {
    }

    public static class ListNode {
        int value;
        ListNode next;

        ListNode(int x) {
            value = x;
        }

        ListNode() {
        }
    }

    private static int N = 120;
    private static int D[][] = new int[N][];
    private static int MAX_SUM[][] = new int[N][];
    //优化存储结果数组MAX_SUM，不需要二维数组，只需要一维数组即可;虽然节省空间，但是时间复杂度还是不变的
    private static int MAX_SUM_NEW[] = new int[N];

    static {
        String[] split = "".split("");
        int pointer = 0;
        for (int i = 0; i < D.length; i++) {
            D[i] = new int[i + 1];
            for (int j = 0; j <= i; j++) {
                D[i][j] = Integer.valueOf(split[pointer]);
                pointer++;
            }
        }
        for (int i = 0; i < MAX_SUM.length; i++) {
            MAX_SUM[i] = new int[i + 1];
            for (int j = 0; j <= i; j++) {
                MAX_SUM[i][j] = -1;
            }
        }


    }

    //二分查找：初始值left=0,right=length-1,搜索闭区间[left,right]; while循环条件left<=right;
    public static int binarySearch(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                left = mid + 1;

            } else if (nums[mid] > target) {
                right = mid - 1;
            }
        }
        //return left;
        return nums[left] == target ? left : -1;
    }

    //左边界查找：
    public static int leftBoundarySearch(int[] nums, int target) {
        int left = 0;
        int right = nums.length;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                right = mid;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else if (nums[mid] > target) {
                right = mid;
            }
        }
        //return left;
        if (nums.length == left) {
            return -1;
        }
        return nums[left] == target ? left : -1;
    }


    //右边界查找：
    public static int rightBoundarySearch(int[] nums, int target) {
        int left = 0;
        int right = nums.length;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                left = mid + 1;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else if (nums[mid] > target) {
                right = mid;
            }
        }
        //return left - 1;
        if (left == 0) {
            return -1;
        }
        return nums[left - 1] == target ? left - 1 : -1;
    }

    //合并两个有序链表
    public static ListNode mergeTwoLists(ListNode list1, ListNode list2) {


        ListNode res = new ListNode();
        ListNode head = res;
        while (list1 != null && list2 != null) {
            if (list1.value > list2.value) {
                head.next = list2;
                list2 = list2.next;
            } else {
                head.next = list1;
                list1 = list1.next;
            }
            head = head.next;
        }
        return res;
    }

    /**
     * Definition for singly-linked list.
     * public class ListNode {
     * int val;
     * ListNode next;
     * ListNode(int x) { val = x; }
     * }
     */
    //合并两个有序链表
    public static ListNode mergeTwoLists1(ListNode l1, ListNode l2) {
        ListNode res = new ListNode(0);
        ListNode head = res;//指向头结点的引用
        while (l1 != null && l2 != null) {
            if (l1.value < l2.value) {
                res.next = l1;
                l1 = l1.next;
            } else {
                res.next = l2;
                l2 = l2.next;
            }
            res = res.next;
        }
        if (l2 == null) {
            res.next = l1;
        } else {
            res.next = l2;
        }
        return head.next;
    }

    //找到两个单链表相交的起始结点(判断链表是否相交)
    //走到尽头见不到你，于是走过你来时的路，等到相遇时才发现，你也走过我来时的路
    //我先走我的路，再走你的路，你先走你的路，再走我的路，这样咱俩走的路程就一样了，速度一样，那么肯定在咱俩两条路的交叉口相遇，并一起走向终点。这思路，给跪了！
    public static ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if (headA == null || headB == null) {
            return null;
        }
        ListNode A = headA;
        ListNode B = headB;
        // 直到两人相遇
        while (A != B) {
            if (A != null) {
                // 如果A没走到尽头就一直走下去
                A = A.next;
            } else {
                // 直到尽头也没遇见B，所以去往B走过的路
                A = headB;
            }
            if (B != null) {
                B = B.next;
            } else {
                B = headA;
            }
        }
        // 返回A\B第一次相遇的地方
        return B;

    }

    //求单链表是否有环（快、慢指针（龟兔赛跑思想,如果出现环形，那么必然相遇），快指针每次移动2步，慢指针每次移动一步
    public static boolean hasCycle(ListNode head) {
        if (head == null || head.next == null) {
            return false;
        }
        ListNode slow = head;
        ListNode fast = head.next;
        while (slow != fast) {
            if (fast == null || fast.next == null) {
                return false;
            }
            slow = slow.next;
            fast = fast.next.next;
        }
        //哈希表方案：每次遍历到一个节点时，判断该节点此前是否被访问过。
/*        Set<ListNode> seen = new HashSet<>();
        while (head!=null){
            if (!seen.add(head)){
                return true;
            }
            head = head.next;
        }
        return false;*/


        return true;

    }

    //单链表的反转
    public static ListNode reverseNode(ListNode header) {
        if (header == null || header.next == null) {
            return header;
        }
        ListNode pre = header;
        ListNode cur = header.next;
        while (cur != null) {
            ListNode temp = cur.next;
            cur.next = pre;
            pre = cur;
            cur = temp;
        }
        header.next = null;
        return pre;
    }
    /**
     * 动规行问题的特点
     * 1) 问题具有最优子结构性质。如果问题的最优解所包含的 子问题的解也是最优的，我们就称该问题具有最优子结构性质。
     * 2) 无后效性。当前的若干个状态值一旦确定，则此后过程的演变就只和这若干个状态的值有关，
     * 和之前是采取哪种手段或经过哪条路径演变到当前的这若干个状态，没有关系
     * 版权声明：本文为CSDN博主「ChrisYoung1314」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
     * 原文链接：https://blog.csdn.net/baidu_28312631/article/details/47418773
     */

    //动态规划入门:在数字三角形中寻找一条从顶部到底边的路径，使得路径上所经过的数字之和最大。路径上的每一步都只能往左下或 右下走。时间复杂度2的n次方
    public static int MaxSum(int i, int j) {
        if (i == N - 1) {
            return D[i][j];
        }
        int x = MaxSum(i + 1, j);
        int y = MaxSum(i + 1, j + 1);
        return Math.max(x, y) + D[i][j];
    }

    //记忆递归型的动态规划程序：如果每算出一个MaxSum(r,j)就保存起来，下次用到其值的时候直接取用，则可免去重复计算
    public static int MemoryMaxSum(int i, int j) {
        if (MAX_SUM[i][j] != -1) {
            return MAX_SUM[i][j];
        }
        if (i == N - 1) {
            MAX_SUM[i][j] = D[i][j];
        } else {
            int x = MemoryMaxSum(i + 1, j);
            int y = MemoryMaxSum(i + 1, j + 1);
            MAX_SUM[i][j] = Math.max(x, y) + D[i][j];
        }

        return MAX_SUM[i][j];
    }

    //递推型动态规划程序：继续优化
    public static int recursionMaxSum() {
        for (int k = 0; k <= N -1; k++) {
            MAX_SUM[N-1][k] = D[N-1][k];
        }
        for (int m = N - 2; m >= 0; --m) {
            for (int n = 0; n <= m; ++n) {
                MAX_SUM[m][n] = Math.max(MAX_SUM[m+1][n], MAX_SUM[m+1][n+1]) + D[m][n];
            }
        }

        return MAX_SUM[0][0];
    }
    //递推型动态规划程序：存储结果空间优化，只用一维数组
    public static int OneDimesionMaxSum() {
        for (int k = 0; k <= N -1; k++) {
            MAX_SUM_NEW[k] = D[N-1][k];
        }

        for (int m = N - 2; m >= 0; --m) {
            for (int n = 0; n <= m; ++n) {
                MAX_SUM_NEW[n] = Math.max(MAX_SUM_NEW[n], MAX_SUM_NEW[n+1]) + D[m][n];
            }
        }

        return MAX_SUM_NEW[0];
    }

    public static void main(String[] args) {
        ListNode Node1 = new ListNode(1);
        ListNode Node2 = new ListNode(2);
        ListNode Node3 = new ListNode(3);
        ListNode Node4 = new ListNode(4);
        ListNode Node5 = new ListNode(5);


        ListNode Node6 = new ListNode(8);
        ListNode Node7 = new ListNode(9);


        Node1.next = Node2;
        Node2.next = Node3;
        Node3.next = Node4;
        Node4.next = Node5;
        Node5.next = Node6;
        Node6.next = Node7;
        Node7.next = null;
//        System.out.println("--------判断链表是否相交-------------");
//        printLinkElement(getIntersectionNode(Node1, Node6));
//        System.out.println(getIntersectionNode(Node1, Node6).value);
//        System.out.println("----------求单链表是否有环-----------");
//        System.out.println(hasCycle(Node1));

//        ListNode twoLists = mergeTwoLists1(Node1, Node4);
//        System.out.println(s);
//        int[] a = {1, 2, 3, 4, 4, 4, 4, 5};
//        System.out.println(rightBoundarySearch(a, 4) - leftBoundarySearch(a, 4) + 1);

//        printLinkElement(reverseNode(Node1));

        //java定义二维不等列数组
        int a[][] = new int[5][];//这里只声明二维数组中一维的长度
        for (int i = 0; i < D.length; i++) {
            System.out.print("第" + (i + 1) + "行" + ": ");
            for (int j = 0; j < D[i].length; j++) {
                System.out.print(D[i][j]);
                if (j == D[i].length - 1) {
                    System.out.println();
                }
            }
        }
/*        long start = System.currentTimeMillis();
        int maxSum = MaxSum(0, 0);
        long end = System.currentTimeMillis();
        System.out.println("从上到下的最大和为：" + maxSum + " 耗时：" + (end - start));*/

        long start1 = System.currentTimeMillis();
        int maxSum1 = MemoryMaxSum(0, 0);
        long end1 = System.currentTimeMillis();
        System.out.println("从上到下的最大和为：" + maxSum1 + " 耗时：" + (end1 - start1));

        long start2 = System.currentTimeMillis();
        int maxSum2 = recursionMaxSum();
        long end2 = System.currentTimeMillis();
        System.out.println("从上到下的最大和为：" + maxSum2 + " 耗时：" + (end2 - start2));

        long start3 = System.currentTimeMillis();
        int maxSum3 = OneDimesionMaxSum();
        long end3 = System.currentTimeMillis();
        System.out.println("从上到下的最大和为：" + maxSum3 + " 耗时：" + (end3 - start3));
    }

    public static void printLinkElement(ListNode listNode) {
        ListNode temp = new ListNode(0);
        temp.next = listNode;
        StringBuilder stringBuilder = new StringBuilder();
        while (temp.next.next != null) {
            stringBuilder.append(temp.next.value).append("->");
            temp = temp.next;
        }
        stringBuilder.append(temp.next.value);
        System.out.println(stringBuilder.toString());
    }
}

